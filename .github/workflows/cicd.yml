# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: cicd

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.output.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: ghcr.io/joint-online-judge/horse
          flavor: |
            latest=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      - name: Set output
        id: output
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "$TAGS"
          TAG="${TAGS%%$'\n'*}"
          echo "$TAG"
          echo "::set-output name=tag::$TAG"
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Extract metadata (tags, labels) for Docker (PyTest)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: docker/metadata-action@v3
        id: meta_pytest
        with:
          images: ghcr.io/joint-online-judge/horse
          flavor: |
            latest=false
      - name: Build and push Docker image with PyTest
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        id: docker_build_pytest
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            PYTEST=1
          tags: ghcr.io/joint-online-judge/horse:test
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Git setup
        uses: fregante/setup-git-user@v1
      - name: Generate openapi.json
        run: |
          mkdir -p build
          docker run --rm ${{ steps.output.outputs.tag }} python3 -m joj.horse openapi --pretty > build/openapi.json
      - name: Upload openapi.json as artifact
        uses: actions/upload-artifact@v2
        with:
          name: openapi-json
          path: build/openapi.json
      - name: Git push openapi.json
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: openapi
          build_dir: build
          keep_history: true
          commit_message: Generate openapi.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Checkout joj-deploy-lite repository
        uses: actions/checkout@v2
        with:
          repository: joint-online-judge/joj-deploy-lite
          path: joj-deploy-lite
          ref: master
      - name: Start docker compose
        env:
          HORSE_TAG: ${{ steps.extract_branch.outputs.branch }}
        run: |
          echo $HORSE_TAG
          cd joj-deploy-lite
          bash ./start.sh lite
          docker ps
      # - name: Test and Generate coverage report
      #   run: |
      #     docker run --name horse --network host ${{ needs.build.outputs.tag }} /bin/bash -c "poetry install --no-dev -E test; pytest -svv --cov=./ --cov-report=xml"
      #     docker cp horse:/root/coverage.xml .
      # - name: Upload coverage to Codacy
      #   uses: codacy/codacy-coverage-reporter-action@v1
      #   with:
      #     project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
      #     coverage-reports: coverage.xml
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: true
  swagger-codegen:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master')
    needs: test
    runs-on: ubuntu-20.04
    env:
      JAR_VERSION: 3.0.30
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: openapi-json
          path: build/openapi
      - name: Set up OpenJDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          check-latest: true
      - name: Cache swagger-codegen
        id: cache-swagger-codegen
        uses: actions/cache@v2
        with:
          path: swagger-codegen-cli.jar
          key: ${{ runner.os }}-swagger-codegen-${{ env.JAR_VERSION }}
      - name: Download swagger-codegen
        if: steps.cache-swagger-codegen.outputs.cache-hit != 'true'
        run: |
          wget https://repo1.maven.org/maven2/io/swagger/codegen/v3/swagger-codegen-cli/${{ env.JAR_VERSION }}/swagger-codegen-cli-${{ env.JAR_VERSION }}.jar -O swagger-codegen-cli.jar
      - name: Create config file
        run: |
          echo '{"packageName": "joj.horse_client", "projectName": "horse-python-client", "library": "asyncio"}' > build/python-client.json
      - name: Generate client
        run: |
          java -jar swagger-codegen-cli.jar generate \
          -i build/openapi/openapi.json \
          --git-user-id "joint-online-judge" \
          --git-repo-id "horse-python-client" \
          -l python \
          -o build/client/python \
          -c build/python-client.json
      - name: Monkeypatch namespace package
        run: sed -i 's/find_packages/find_namespace_packages/g' build/client/python/setup.py
      - name: Find joj/horse_client
        run: ls -lha build/client/python/
      - name: Push to client repo
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
          BRANCH_NAME: ${{ github.ref == 'refs/heads/master' && 'master' }}
        with:
          source-directory: 'build/client/python'
          destination-github-username: 'joint-online-judge'
          destination-repository-name: 'horse-python-client'
          user-name: github-actions[bot]
          user-email: 41898282+github-actions[bot]@users.noreply.github.com
          commit-message: See ORIGIN_COMMIT from ${{ env.BRANCH_NAME }}
          target-branch: ${{ env.BRANCH_NAME }}
  remote-ssh-command:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master')
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~/joj-deploy
            git pull
            ./start.sh prod
            docker image prune -f
