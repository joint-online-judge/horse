"""define all nullable explicitly

Revision ID: 2bafd0d01ae2
Revises: ba45dc7837de
Create Date: 2021-11-18 20:38:14.550916

"""
import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "2bafd0d01ae2"
down_revision = "ba45dc7837de"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "domain_invitations",
        "expire_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "domain_invitations",
        "domain_id",
        existing_type=postgresql.UUID(),
        nullable=False,
    )
    op.alter_column(
        "domain_roles",
        "permission",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column(
        "domain_roles", "domain_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "domain_users", "domain_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "domain_users", "user_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column("domains", "gravatar", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("domains", "bulletin", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_constraint("domains_owner_id_fkey", "domains", type_="foreignkey")
    op.create_foreign_key(
        None, "domains", "users", ["owner_id"], ["id"], ondelete="SET NULL"
    )
    op.drop_index(
        "ix_problem_problem_set_links_position", table_name="problem_problem_set_links"
    )
    op.alter_column(
        "problem_sets", "domain_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "problem_sets", "content", existing_type=sa.VARCHAR(), nullable=False
    )
    op.drop_constraint("problem_sets_owner_id_fkey", "problem_sets", type_="foreignkey")
    op.create_foreign_key(
        None, "problem_sets", "users", ["owner_id"], ["id"], ondelete="SET NULL"
    )
    op.alter_column(
        "problems", "domain_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column("problems", "content", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_constraint("problems_problem_group_id_fkey", "problems", type_="foreignkey")
    op.drop_constraint("problems_owner_id_fkey", "problems", type_="foreignkey")
    op.create_foreign_key(
        None, "problems", "users", ["owner_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None,
        "problems",
        "problem_groups",
        ["problem_group_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.alter_column("users", "gravatar", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "student_id", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "real_name", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "role", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "is_active", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("users", "register_ip", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "login_ip", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "users", "hashed_password", existing_type=sa.VARCHAR(), nullable=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users", "hashed_password", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column("users", "login_ip", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "register_ip", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "is_active", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("users", "role", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "real_name", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "student_id", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "gravatar", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_constraint(None, "problems", type_="foreignkey")
    op.drop_constraint(None, "problems", type_="foreignkey")
    op.create_foreign_key(
        "problems_owner_id_fkey",
        "problems",
        "users",
        ["owner_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "problems_problem_group_id_fkey",
        "problems",
        "problem_groups",
        ["problem_group_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column("problems", "content", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "problems", "domain_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.drop_constraint(None, "problem_sets", type_="foreignkey")
    op.create_foreign_key(
        "problem_sets_owner_id_fkey",
        "problem_sets",
        "users",
        ["owner_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "problem_sets", "content", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "problem_sets", "domain_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.create_index(
        "ix_problem_problem_set_links_position",
        "problem_problem_set_links",
        ["position"],
        unique=False,
    )
    op.drop_constraint(None, "domains", type_="foreignkey")
    op.create_foreign_key(
        "domains_owner_id_fkey",
        "domains",
        "users",
        ["owner_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column("domains", "bulletin", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("domains", "gravatar", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "domain_users", "user_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "domain_users", "domain_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "domain_roles", "domain_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "domain_roles",
        "permission",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "domain_invitations",
        "domain_id",
        existing_type=postgresql.UUID(),
        nullable=True,
    )
    op.alter_column(
        "domain_invitations",
        "expire_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    # ### end Alembic commands ###
