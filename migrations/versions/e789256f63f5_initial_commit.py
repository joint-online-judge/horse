"""Initial Commit

Revision ID: e789256f63f5
Revises:
Create Date: 2021-11-02 18:31:50.159622

"""
import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op

# revision identifiers, used by Alembic.
revision = "e789256f63f5"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "problem_groups",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_problem_groups_created_at"),
        "problem_groups",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_problem_groups_id"), "problem_groups", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_problem_groups_updated_at"),
        "problem_groups",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "users",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "login_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("gravatar", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("student_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("real_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("username_lower", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email_lower", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("register_ip", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("login_ip", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_created_at"), "users", ["created_at"], unique=False)
    op.create_index(op.f("ix_users_email_lower"), "users", ["email_lower"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_real_name"), "users", ["real_name"], unique=False)
    op.create_index(op.f("ix_users_role"), "users", ["role"], unique=False)
    op.create_index(op.f("ix_users_student_id"), "users", ["student_id"], unique=False)
    op.create_index(op.f("ix_users_updated_at"), "users", ["updated_at"], unique=False)
    op.create_index(
        op.f("ix_users_username_lower"), "users", ["username_lower"], unique=True
    )
    op.create_table(
        "domains",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("gravatar", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("bulletin", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("hidden", sa.Boolean(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_domains_created_at"), "domains", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_domains_id"), "domains", ["id"], unique=False)
    op.create_index(op.f("ix_domains_name"), "domains", ["name"], unique=False)
    op.create_index(
        op.f("ix_domains_updated_at"), "domains", ["updated_at"], unique=False
    )
    op.create_index(op.f("ix_domains_url"), "domains", ["url"], unique=True)
    op.create_table(
        "user_oauth_accounts",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("oauth_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("refresh_token", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("expires_at", sa.Integer(), nullable=True),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("account_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_oauth_accounts_account_email"),
        "user_oauth_accounts",
        ["account_email"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_oauth_accounts_account_id"),
        "user_oauth_accounts",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_oauth_accounts_account_name"),
        "user_oauth_accounts",
        ["account_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_oauth_accounts_created_at"),
        "user_oauth_accounts",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_oauth_accounts_id"), "user_oauth_accounts", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_user_oauth_accounts_updated_at"),
        "user_oauth_accounts",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "domain_invitations",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("expire_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("domain_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(["domain_id"], ["domains.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("domain_id", "code"),
    )
    op.create_index(
        op.f("ix_domain_invitations_code"), "domain_invitations", ["code"], unique=False
    )
    op.create_index(
        op.f("ix_domain_invitations_created_at"),
        "domain_invitations",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_domain_invitations_id"), "domain_invitations", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_domain_invitations_updated_at"),
        "domain_invitations",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_domain_invitations_url"), "domain_invitations", ["url"], unique=True
    )
    op.create_table(
        "domain_roles",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("permission", sa.JSON(), nullable=True),
        sa.Column("domain_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["domain_id"], ["domains.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("domain_id", "role"),
    )
    op.create_index(
        op.f("ix_domain_roles_created_at"), "domain_roles", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_domain_roles_id"), "domain_roles", ["id"], unique=False)
    op.create_index(
        op.f("ix_domain_roles_updated_at"), "domain_roles", ["updated_at"], unique=False
    )
    op.create_table(
        "domain_users",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("domain_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["domain_id"], ["domains.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("domain_id", "user_id"),
    )
    op.create_index(
        op.f("ix_domain_users_created_at"), "domain_users", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_domain_users_id"), "domain_users", ["id"], unique=False)
    op.create_index(
        op.f("ix_domain_users_updated_at"), "domain_users", ["updated_at"], unique=False
    )
    op.create_table(
        "problem_sets",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("available_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("due_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("domain_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("hidden", sa.Boolean(), nullable=False),
        sa.Column("scoreboard_hidden", sa.Boolean(), nullable=False),
        sa.Column("num_submit", sa.Integer(), nullable=False),
        sa.Column("num_accept", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["domain_id"], ["domains.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_problem_sets_created_at"), "problem_sets", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_problem_sets_id"), "problem_sets", ["id"], unique=False)
    op.create_index(
        op.f("ix_problem_sets_updated_at"), "problem_sets", ["updated_at"], unique=False
    )
    op.create_index(op.f("ix_problem_sets_url"), "problem_sets", ["url"], unique=True)
    op.create_table(
        "problems",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("domain_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("problem_group_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("hidden", sa.Boolean(), nullable=False),
        sa.Column("num_submit", sa.Integer(), nullable=False),
        sa.Column("num_accept", sa.Integer(), nullable=False),
        sa.Column("data_version", sa.Integer(), nullable=False),
        sa.Column("languages", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["domain_id"], ["domains.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(
            ["problem_group_id"], ["problem_groups.id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_problems_created_at"), "problems", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_problems_id"), "problems", ["id"], unique=False)
    op.create_index(
        op.f("ix_problems_updated_at"), "problems", ["updated_at"], unique=False
    )
    op.create_index(op.f("ix_problems_url"), "problems", ["url"], unique=True)
    op.create_table(
        "problem_problem_set_links",
        sa.Column("problem_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("problem_set_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(["problem_id"], ["problems.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["problem_set_id"], ["problem_sets.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("problem_id", "problem_set_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("problem_problem_set_links")
    op.drop_index(op.f("ix_problems_url"), table_name="problems")
    op.drop_index(op.f("ix_problems_updated_at"), table_name="problems")
    op.drop_index(op.f("ix_problems_id"), table_name="problems")
    op.drop_index(op.f("ix_problems_created_at"), table_name="problems")
    op.drop_table("problems")
    op.drop_index(op.f("ix_problem_sets_url"), table_name="problem_sets")
    op.drop_index(op.f("ix_problem_sets_updated_at"), table_name="problem_sets")
    op.drop_index(op.f("ix_problem_sets_id"), table_name="problem_sets")
    op.drop_index(op.f("ix_problem_sets_created_at"), table_name="problem_sets")
    op.drop_table("problem_sets")
    op.drop_index(op.f("ix_domain_users_updated_at"), table_name="domain_users")
    op.drop_index(op.f("ix_domain_users_id"), table_name="domain_users")
    op.drop_index(op.f("ix_domain_users_created_at"), table_name="domain_users")
    op.drop_table("domain_users")
    op.drop_index(op.f("ix_domain_roles_updated_at"), table_name="domain_roles")
    op.drop_index(op.f("ix_domain_roles_id"), table_name="domain_roles")
    op.drop_index(op.f("ix_domain_roles_created_at"), table_name="domain_roles")
    op.drop_table("domain_roles")
    op.drop_index(op.f("ix_domain_invitations_url"), table_name="domain_invitations")
    op.drop_index(
        op.f("ix_domain_invitations_updated_at"), table_name="domain_invitations"
    )
    op.drop_index(op.f("ix_domain_invitations_id"), table_name="domain_invitations")
    op.drop_index(
        op.f("ix_domain_invitations_created_at"), table_name="domain_invitations"
    )
    op.drop_index(op.f("ix_domain_invitations_code"), table_name="domain_invitations")
    op.drop_table("domain_invitations")
    op.drop_index(
        op.f("ix_user_oauth_accounts_updated_at"), table_name="user_oauth_accounts"
    )
    op.drop_index(op.f("ix_user_oauth_accounts_id"), table_name="user_oauth_accounts")
    op.drop_index(
        op.f("ix_user_oauth_accounts_created_at"), table_name="user_oauth_accounts"
    )
    op.drop_index(
        op.f("ix_user_oauth_accounts_account_name"), table_name="user_oauth_accounts"
    )
    op.drop_index(
        op.f("ix_user_oauth_accounts_account_id"), table_name="user_oauth_accounts"
    )
    op.drop_index(
        op.f("ix_user_oauth_accounts_account_email"), table_name="user_oauth_accounts"
    )
    op.drop_table("user_oauth_accounts")
    op.drop_index(op.f("ix_domains_url"), table_name="domains")
    op.drop_index(op.f("ix_domains_updated_at"), table_name="domains")
    op.drop_index(op.f("ix_domains_name"), table_name="domains")
    op.drop_index(op.f("ix_domains_id"), table_name="domains")
    op.drop_index(op.f("ix_domains_created_at"), table_name="domains")
    op.drop_table("domains")
    op.drop_index(op.f("ix_users_username_lower"), table_name="users")
    op.drop_index(op.f("ix_users_updated_at"), table_name="users")
    op.drop_index(op.f("ix_users_student_id"), table_name="users")
    op.drop_index(op.f("ix_users_role"), table_name="users")
    op.drop_index(op.f("ix_users_real_name"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email_lower"), table_name="users")
    op.drop_index(op.f("ix_users_created_at"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_problem_groups_updated_at"), table_name="problem_groups")
    op.drop_index(op.f("ix_problem_groups_id"), table_name="problem_groups")
    op.drop_index(op.f("ix_problem_groups_created_at"), table_name="problem_groups")
    op.drop_table("problem_groups")
    # ### end Alembic commands ###
